/// Grid width percentage

@function grid-width($key) {
  @if map-has-key($grid-widths, $key) {
	@return map-get($grid-widths, $key);
  }

  @error "Unknown grid width `#{$key}`";
}

/// Generate grid column styles

@mixin grid-column($width: full, $float: left, $at: tablet) {
  box-sizing: border-box;
  @if $at != desktop {
	width: 100%;
  }
  padding: 0 $gutter-half;
  @include media-query($from: $at) {
	width: grid-width($width);
	float: $float;
  }
}

/// Width container mixin

@mixin width-container($width: $page-width) {

  // By default, limit the width of the container to the page width
  max-width: $width;

  // On mobile, add half width gutters
  margin-right: $gutter-half;
  margin-left: $gutter-half;

  // Respect 'display cutout' safe area (avoids notches and rounded corners)
  @supports (margin: unquote("max(calc(0px))")) {
	$gutter-safe-area-right: calc(#{$gutter-half} + env(safe-area-inset-right));
	$gutter-safe-area-left: calc(#{$gutter-half} + env(safe-area-inset-left));

	// Use max() to pick largest margin, default or with safe area
	// Escaped due to Sass max() vs. CSS native max()
	margin-right: unquote("max(#{$gutter-half}, #{$gutter-safe-area-right})");
	margin-left: unquote("max(#{$gutter-half}, #{$gutter-safe-area-left})");
  }

  // On tablet, add full width gutters
  @include media-query($from: tablet) {
	margin-right: $gutter;
	margin-left: $gutter;

	// Respect 'display cutout' safe area (avoids notches and rounded corners)
	@supports (margin: unquote("max(calc(0px))")) {
	  $gutter-safe-area-right: calc(#{$gutter-half} + env(safe-area-inset-right));
	  $gutter-safe-area-left: calc(#{$gutter-half} + env(safe-area-inset-left));

	  // Use max() to pick largest margin, default or with safe area
	  // Escaped due to Sass max() vs. CSS native max()
	  margin-right: unquote("max(#{$gutter}, #{$gutter-safe-area-right})");
	  margin-left: unquote("max(#{$gutter}, #{$gutter-safe-area-left})");
	}
  }

  // As soon as the viewport is greater than the width of the page plus the
  // gutters, just centre the content instead of adding gutters.
  @include media-query($and: "(min-width: #{($width + $gutter * 2)})") {
	margin-right: auto;
	margin-left: auto;

	// Since a safe area may have previously been set above,
	// we need to duplicate this margin that centers the page.
	@supports (margin: unquote("max(calc(0px))")) {
	  margin-right: auto;
	  margin-left: auto;
	}
  }
}




// Example usage with Breadcrumbs, back links:
//
// <div class="width-container">
//   <!-- Breadcrumbs, back links are placed in here. -->
//   <div class="main-wrapper">
//       <!-- Wrapper for the main content of your page which applies padding
//            to the top / bottom -->
//   </div>
// </div>
//
// Example usage without Breadcrumbs, back links:
//
// <div class="width-container">
//   <div class="main-wrapper main-wrapper--lg">
//       <!-- Wrapper for the main content of your page which applies padding
//            to the top / bottom -->
//   </div>
// </div>

@mixin main-wrapper {
  // In IE11 the `main` element can be used, but is not recognized  â€“
  // meaning it's not defined in IE's default style sheet,
  // so it uses CSS initial value, which is inline.
  display: block;
  padding-top: spacing(4);
  padding-bottom: spacing(4);

  @include media-query($from: tablet) {
	// This spacing is manually adjusted to replicate the margin of
	// heading-xl (50px) minus the spacing of back link and
	// breadcrumbs (10px)
	padding-top: spacing(7);
	padding-bottom: spacing(7);
	min-height: 50vh;
  }
}
