/// Calculate the height of an equilateral triangle

@function _equilateral-height($base) {
  $square-root-of-three: 1.732;

  @return ($base * 0.5) * $square-root-of-three;
}

/// Arrow mixin

@mixin shape-arrow($direction, $base, $height: null, $display: block) {
  display: $display;

  width: 0;
  height: 0;

  border-style: solid;
  border-color: transparent; // 1

  $perpendicular: $base * 0.5;

  @if ($height == null) {
	$height: _equilateral-height($base);
  }

  @if $direction == "up" {
	clip-path: polygon(50% 0%, 0% 100%, 100% 100%); // 3

	border-width: 0 $perpendicular $height $perpendicular;
	border-bottom-color: inherit; // 2
  } @else if $direction == "right" {
	clip-path: polygon(0% 0%, 100% 50%, 0% 100%); // 3

	border-width: $perpendicular 0 $perpendicular $height;
	border-left-color: inherit; // 2
  } @else if $direction == "down" {
	clip-path: polygon(0% 0%, 50% 100%, 100% 0%); // 3

	border-width: $height $perpendicular 0 $perpendicular;
	border-top-color: inherit; // 2
  } @else if $direction == "left" {
	clip-path: polygon(0% 50%, 100% 100%, 100% 0%); // 3

	border-width: $perpendicular $height $perpendicular 0;
	border-right-color: inherit; // 2
  } @else {
	@error "Invalid arrow direction: expected `up`, `right`, `down` or `left`, got `#{$direction}`";
  }
}


.header {
	// border-bottom: spacing(2) solid $header--border-color !important;
	color: $header--text-color;
	background: $header--background-color;

	@include media-query($media-type: print) {
		display: none;
	}
}

.header--container--full-width {
	padding: 0 spacing(3);

	.header--menu-button {
		right: spacing(2);
	}
}

.header--container {
	@include clearfix;
	position: relative;
	padding: spacing(4) 0;

	@include media-query($until: tablet) {
		padding: spacing(3) 0 spacing(2);
	}
}

.header--logo,
.header--content {
	box-sizing: border-box;
	@include clearfix;
}

.header--logo {
	@include media-query ($from: desktop) {
		margin-bottom: 0 !important;
		float: left;
		vertical-align: top;
		padding-right: spacing(5);
		@include responsive-margin(2, "bottom");
	}

	@include media-query ($until: desktop) {
		width: 100%;
	}
}

.header--content {
	@include media-query ($from: desktop) {
		margin-bottom: 0 !important;
		float: right;
		text-align: right;
		vertical-align: top;
		max-width: calc(100% - 300px);
	}
}
.header--logotype--text {
	display: block;
	width: 100%;
	clear: both;
	@include font($size: 36, $weight: bold);
	line-height: 1;
	padding-bottom: spacing(1);

	@include media-query ($until: desktop) {
		padding-bottom: spacing(1) * 1.25;
	}
}

.header--logotype--link {
	// Font size needs to be set on the link so that the box sizing is correct in Firefox
	@include font($size: false, $weight: bold);

	display: inline-block;
	@include font($size: 24, $weight: bold);

	&:link,
	&:visited {
		color: $header--logotype-color;
	}

	&:link,
	&:visited,
	&:active {
	  text-decoration: none;
	}

	// Remove any borders that show when focused and hovered.
	&:focus {
		margin-bottom: 0;
		border-bottom: 0;
		@include focused-text;
	}

	&:hover,
	&:active {
		[class*="header--logotype"] {
			text-decoration: underline;
			text-decoration-thickness: $header-link-underline-thickness * 1;
			text-underline-offset: spacing(1);
		}
	}
}


.header--link {
	@include typography-common;
	@include link-style-inverse;
	@extend %bold;
	text-decoration: none;

	&:hover {
		text-decoration: underline;
		text-decoration-thickness: $header-link-underline-thickness;
		text-underline-offset: spacing(1);
	}

	&:focus {
		@include focused-text;
	}
}



.header--menu-button {
	@include font($size: 19);
	display: none;
	position: absolute;
	top: spacing(2);
	right: 0;
	margin: 0;
	padding: spacing(2);
	text-align: left;
	border: 0;
	background: $header--button--background;
	cursor: pointer;
	color: $header--button--text-color;

	&:hover {
		text-decoration: solid underline $header-link-underline-thickness;
	}

	&:focus {
		@include focused-text;
	}

	&:after {
		@include shape-arrow($direction: down, $base: 10px, $display: inline-block);
		content: "";
		margin-left: spacing(1);
	}

	@include media-query ($from: tablet) {
		top: spacing(3);
	}
}

.header--menu-button--open {
	&:after {
		@include shape-arrow($direction: up, $base: 10px, $display: inline-block);
	}
}

.header--navigation {
	display: block;
	width: 100%;
	margin: 0;
	padding: 0;
	list-style: none;

	@include media-query($until: tablet) {
		padding-top: spacing(2);
	}
}

.js-enabled {
	.header--menu-button {
		display: block;
		@include media-query ($from: desktop) {
			display: none;
		}
	}

	.header--navigation {
		display: none;
		@include media-query ($from: desktop) {
			display: block;
		}
	}

	.header--navigation--open {
		display: block;
	}
}

.header--navigation--end {
	@include media-query ($from: desktop) {
		margin: 0;
		padding: spacing(1) 0;
		text-align: right;
	}
}

.header--navigation-item {
	border-bottom: 1px solid $header--nav-item-border-color;
	box-sizing: border-box;

	@include media-query($until: tablet) {
		padding: spacing(2) 0;
	}
	@include media-query ($from: tablet) {
		display: inline-block;
		padding: 0;
		border: 0;
		width: 24%;
	}
	@include media-query ($from: desktop) {
		width: 30%;
	}

	a {
		white-space: nowrap;
	}
}

.header--navigation-item--active {
	a {
		&:link,
		&:visited {
			text-decoration: underline;
			text-decoration-thickness: calc($header-link-underline-thickness / 2);
			text-underline-offset: spacing(1);
		}
		&:hover {
			text-decoration-thickness: $header-link-underline-thickness;
		}

		// When focussed, the text colour needs to be darker to ensure that colour contrast is still acceptable
		&:focus {
			color: $link-color--focus;
		}
	}
}

.header--navigation-item:last-child {
	margin-right: 0;
	border-bottom: none;

	@include media-query($until: tablet) {
		margin-bottom: $gutter * 0.5 !important;
	}
}

@include media-query($media-type: print) {
	.header {
	  border-bottom-width: 0;
	  color: color("black");
	  background: transparent;
	}

	.header--link {
		&:link,
		&:visited {
			color: color("black");
		}

		// Do not append link href to link when printing (e.g. '(/)')
		&:after {
			display: none;
		}
	}
}



